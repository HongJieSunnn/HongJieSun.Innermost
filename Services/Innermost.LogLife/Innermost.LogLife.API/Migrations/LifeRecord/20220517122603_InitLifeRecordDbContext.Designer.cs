// <auto-generated />
using System;
using Innermost.LogLife.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Innermost.LogLife.API.Migrations.LifeRecord
{
    [DbContext(typeof(LifeRecordDbContext))]
    [Migration("20220517122603_InitLifeRecordDbContext")]
    partial class InitLifeRecordDbContext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Innermost.IdempotentCommand.Models.CommandRequest", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CommandName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Time")
                        .HasColumnType("DateTime");

                    b.HasKey("ID");

                    b.ToTable("CommandRequests", (string)null);
                });

            modelBuilder.Entity("Innermost.LogLife.Domain.AggregatesModels.LifeRecordAggregate.Entities.ImagePath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("varchar(95)")
                        .HasColumnName("Path");

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.HasIndex("RecordId");

                    b.ToTable("ImagePaths", (string)null);
                });

            modelBuilder.Entity("Innermost.LogLife.Domain.AggregatesModels.LifeRecordAggregate.Entities.Location", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("City");

                    b.Property<string>("District")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("District");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("LocationName");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("Province");

                    b.HasKey("Id");

                    b.ToTable("Locations", (string)null);
                });

            modelBuilder.Entity("Innermost.LogLife.Domain.AggregatesModels.LifeRecordAggregate.Entities.MusicRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("Album")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Album");

                    b.Property<string>("MusicName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MusicName");

                    b.Property<string>("Singer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Singer");

                    b.HasKey("Id");

                    b.ToTable("MusicRecords", (string)null);
                });

            modelBuilder.Entity("Innermost.LogLife.Domain.AggregatesModels.LifeRecordAggregate.LifeRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DateTime")
                        .HasColumnName("CreateTime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("DateTime")
                        .HasColumnName("DeleteTime");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("varchar(3000)")
                        .HasColumnName("Text");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Text"), "utf8mb4");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("DateTime")
                        .HasColumnName("UpdateTime");

                    b.Property<bool>("_isShared")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsShared");

                    b.Property<string>("_locationUId")
                        .HasColumnType("varchar(95)")
                        .HasColumnName("LocationUId");

                    b.Property<string>("_musicRecordMId")
                        .HasColumnType("varchar(95)")
                        .HasColumnName("MusicRecordMId");

                    b.Property<string>("_userId")
                        .IsRequired()
                        .HasMaxLength(95)
                        .HasColumnType("varchar(95)")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CreateTime");

                    b.HasIndex("Text")
                        .HasAnnotation("MySql:FullTextIndex", true);

                    b.HasIndex("Title")
                        .HasAnnotation("MySql:FullTextIndex", true);

                    b.HasIndex("_isShared");

                    b.HasIndex("_locationUId");

                    b.HasIndex("_musicRecordMId");

                    b.HasIndex("_userId");

                    b.ToTable("LifeRecords", (string)null);
                });

            modelBuilder.Entity("LifeRecordTagSummary", b =>
                {
                    b.Property<int>("EntitiesId")
                        .HasColumnType("int");

                    b.Property<string>("TagsTagId")
                        .HasColumnType("varchar(95)");

                    b.HasKey("EntitiesId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("LifeRecordTagSummary");
                });

            modelBuilder.Entity("TagS.Microservices.Client.Models.TagSummary<int, Innermost.LogLife.Domain.AggregatesModels.LifeRecordAggregate.LifeRecord>", b =>
                {
                    b.Property<string>("TagId")
                        .HasColumnType("varchar(95)")
                        .HasColumnName("TagId");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("TagName");

                    b.HasKey("TagId");

                    b.ToTable("TagSummaries", (string)null);
                });

            modelBuilder.Entity("Innermost.LogLife.Domain.AggregatesModels.LifeRecordAggregate.Entities.ImagePath", b =>
                {
                    b.HasOne("Innermost.LogLife.Domain.AggregatesModels.LifeRecordAggregate.LifeRecord", "LifeRecord")
                        .WithMany("ImagePaths")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LifeRecord");
                });

            modelBuilder.Entity("Innermost.LogLife.Domain.AggregatesModels.LifeRecordAggregate.Entities.Location", b =>
                {
                    b.OwnsOne("Innermost.LogLife.Domain.AggregatesModels.LifeRecordAggregate.ValueObjects.BaiduPOI", "BaiduPOI", b1 =>
                        {
                            b1.Property<string>("LocationId")
                                .HasColumnType("varchar(95)");

                            b1.Property<float>("Latitude")
                                .HasColumnType("float");

                            b1.Property<float>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("LocationId");

                            b1.ToTable("Locations");

                            b1.WithOwner()
                                .HasForeignKey("LocationId");
                        });

                    b.Navigation("BaiduPOI")
                        .IsRequired();
                });

            modelBuilder.Entity("Innermost.LogLife.Domain.AggregatesModels.LifeRecordAggregate.LifeRecord", b =>
                {
                    b.HasOne("Innermost.LogLife.Domain.AggregatesModels.LifeRecordAggregate.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("_locationUId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Innermost.LogLife.Domain.AggregatesModels.LifeRecordAggregate.Entities.MusicRecord", "MusicRecord")
                        .WithMany()
                        .HasForeignKey("_musicRecordMId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Location");

                    b.Navigation("MusicRecord");
                });

            modelBuilder.Entity("LifeRecordTagSummary", b =>
                {
                    b.HasOne("Innermost.LogLife.Domain.AggregatesModels.LifeRecordAggregate.LifeRecord", null)
                        .WithMany()
                        .HasForeignKey("EntitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TagS.Microservices.Client.Models.TagSummary<int, Innermost.LogLife.Domain.AggregatesModels.LifeRecordAggregate.LifeRecord>", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Innermost.LogLife.Domain.AggregatesModels.LifeRecordAggregate.LifeRecord", b =>
                {
                    b.Navigation("ImagePaths");
                });
#pragma warning restore 612, 618
        }
    }
}
